import javax.swing.*;

import java.awt.*;

import javax.swing.border.EmptyBorder;

import java.awt.event.ActionEvent;

import java.awt.event.ActionListener;

public class QuizApplication extends JFrame {

 private static final long serialVersionUID = 1L;

 private JPanel contentPane;

 private CardLayout cardLayout;

 private JPanel mainPanel;

 private JPanel loginPanel, studentPanel, quizPanel, resultPanel, adminPanel;

 private JTextField usernameField;

 private JPasswordField passwordField;

 private JButton loginButton;

 private String[][] quiz = null; // Quiz questions will be created by the admin

 private int currentQuestion = 0, score = 0;

 private String[] studentAnswers;

 private Timer questionTimer; // Timer for each question

 private int timeRemaining; // Remaining time for the current question

 private JLabel timerLabel; // Label to display the timer

 /*** Launch the application.*/

 public static void main(String[] args) {

 EventQueue.invokeLater(() -> {

 try {

 QuizApplication frame = new QuizApplication();

 frame.setVisible(true);

 } catch (Exception e) {

 e.printStackTrace();

 }

 });

 }

 /*** Create the frame.*/

 public QuizApplication() {

 setTitle("Quiz Application");
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

 setBounds(100, 100, 600, 500);

 setResizable(false);

 cardLayout = new CardLayout();

 mainPanel = new JPanel(cardLayout);

 initializeLoginPanel();

 initializeStudentPanel();

 initializeAdminPanel();

 initializeQuizPanel();

 initializeResultPanel();

 mainPanel.add(loginPanel, "Login");

 mainPanel.add(studentPanel, "Student");

 mainPanel.add(adminPanel, "Administrator");

 mainPanel.add(quizPanel, "Quiz");

 mainPanel.add(resultPanel, "Result");

 setContentPane(mainPanel);

 cardLayout.show(mainPanel, "Login");

 }

 private void initializeLoginPanel() {

 loginPanel = new JPanel();

 loginPanel.setLayout(new GridBagLayout());

 loginPanel.setBorder(new EmptyBorder(20, 20, 20, 20));

 JPanel formPanel = new JPanel();

 formPanel.setLayout(new GridLayout(3, 2, 10, 10));

 formPanel.setPreferredSize(new Dimension(250, 120));

 JLabel usernameLabel = new JLabel("Username:");

 usernameField = new JTextField();

 usernameField.setPreferredSize(new Dimension(150, 20));

 JLabel passwordLabel = new JLabel("Password:");

 passwordField = new JPasswordField();

 passwordField.setPreferredSize(new Dimension(150, 20));

 loginButton = new JButton("Login");

 loginButton.setPreferredSize(new Dimension(150, 30));

 loginButton.addActionListener(e -> {

 String username = usernameField.getText();

 String password = new String(passwordField.getPassword());

 if (username.equals("admin") && password.equals("admin")) {

 cardLayout.show(mainPanel, "Administrator");
} else if (username.equals("student") && password.equals("student")) {

 if (quiz == null) {

 JOptionPane.showMessageDialog(this, "No quiz available. Please ask the admin to 

create a quiz.");

 } else {

 cardLayout.show(mainPanel, "Student");

 }

 } else {

 JOptionPane.showMessageDialog(this, "Invalid login. Try again.");

 }

 });

 formPanel.add(usernameLabel);

 formPanel.add(usernameField);

 formPanel.add(passwordLabel);

 formPanel.add(passwordField);

 formPanel.add(new JLabel());

 formPanel.add(loginButton);

 loginPanel.add(formPanel);

 }

 private void initializeAdminPanel() {

 adminPanel = new JPanel();

 adminPanel.setLayout(new BorderLayout());

 JButton createQuizButton = new JButton("Create Quiz");

 createQuizButton.addActionListener(e -> {

 JTextArea quizInput = new JTextArea(10, 40);

 JScrollPane scrollPane = new JScrollPane(quizInput);

 String instructions = "Enter 5 questions (one question per line):\n"

 + "Format: Question;Option1;Option2;Option3;Option4;CorrectOption";

 quizInput.setText(instructions);

 int option = JOptionPane.showConfirmDialog(this, scrollPane, "Enter Quiz Questions",

 JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

 if (option == JOptionPane.OK_OPTION) {

 String input = quizInput.getText().trim();

 if (!input.isEmpty()) {

 String[] quizData = input.split("\n");

 quiz = new String[quizData.length][6];

 for (int i = 0; i < quizData.length; i++) {

 quiz[i] = quizData[i].split(";");

 }

 JOptionPane.showMessageDialog(this, "Quiz created successfully!");
cardLayout.show(mainPanel, "Login");

 }

 }

 });

 adminPanel.add(new JLabel("Welcome Administrator!", JLabel.CENTER), 

BorderLayout.CENTER);

 adminPanel.add(createQuizButton, BorderLayout.SOUTH);

 }

 private void initializeStudentPanel() {

 studentPanel = new JPanel();

 studentPanel.setLayout(new BorderLayout());

 JButton startQuizButton = new JButton("Start Quiz");

 startQuizButton.addActionListener(e -> startQuiz());

 studentPanel.add(new JLabel("Welcome Student!", JLabel.CENTER), 

BorderLayout.CENTER);

 studentPanel.add(startQuizButton, BorderLayout.SOUTH);

 }

 private void initializeQuizPanel() {

 quizPanel = new JPanel();

 quizPanel.setLayout(new GridLayout(7, 1, 10, 10));

 JLabel questionLabel = new JLabel("", JLabel.CENTER);

 ButtonGroup optionsGroup = new ButtonGroup();

 JRadioButton option1 = new JRadioButton();

 JRadioButton option2 = new JRadioButton();

 JRadioButton option3 = new JRadioButton();

 JRadioButton option4 = new JRadioButton();

 JButton nextButton = new JButton("Next");

 timerLabel = new JLabel("Time Remaining: 30", JLabel.CENTER); // Timer label

 optionsGroup.add(option1);

 optionsGroup.add(option2);

 optionsGroup.add(option3);

 optionsGroup.add(option4);

 quizPanel.add(timerLabel);

 quizPanel.add(questionLabel);

 quizPanel.add(option1);

 quizPanel.add(option2);

 quizPanel.add(option3);

 quizPanel.add(option4);
quizPanel.add(nextButton);

 nextButton.addActionListener(e -> {

 processAnswer(optionsGroup);

 });

 quizPanel.putClientProperty("questionLabel", questionLabel);

 quizPanel.putClientProperty("option1", option1);

 quizPanel.putClientProperty("option2", option2);

 quizPanel.putClientProperty("option3", option3);

 quizPanel.putClientProperty("option4", option4);

 }

 private void startQuiz() {

 currentQuestion = 0;

 score = 0;

 studentAnswers = new String[quiz.length];

 cardLayout.show(mainPanel, "Quiz");

 startTimer();

 displayQuestion();

 }

 private void startTimer() {

 timeRemaining = 30;

 timerLabel.setText("Time Remaining: " + timeRemaining);

 if (questionTimer != null) {

 questionTimer.stop();

 }

 questionTimer = new Timer(1000, new ActionListener() {

 @Override

 public void actionPerformed(ActionEvent e) {

 timeRemaining--;

 timerLabel.setText("Time Remaining: " + timeRemaining);

 if (timeRemaining <= 0) {

 questionTimer.stop();

 processAnswer(null); // Proceed to the next question if time runs out

 }

 }

 });

 questionTimer.start();

 }

 private void processAnswer(ButtonGroup optionsGroup) {

 if (optionsGroup != null && optionsGroup.getSelection() != null) {

 String selectedAnswer = optionsGroup.getSelection().getActionCommand();

 studentAnswers[currentQuestion] = selectedAnswer;

 if (selectedAnswer.equals(quiz[currentQuestion][5])) {
score++;

 }

 }

 currentQuestion++;

 if (currentQuestion < quiz.length) {

 startTimer();

 displayQuestion();

 } else {

 questionTimer.stop();

 cardLayout.show(mainPanel, "Result");

 showResult();

 }

 }

 private void displayQuestion() {

 JLabel questionLabel = (JLabel) quizPanel.getClientProperty("questionLabel");

 JRadioButton option1 = (JRadioButton) quizPanel.getClientProperty("option1");

 JRadioButton option2 = (JRadioButton) quizPanel.getClientProperty("option2");

 JRadioButton option3 = (JRadioButton) quizPanel.getClientProperty("option3");

 JRadioButton option4 = (JRadioButton) quizPanel.getClientProperty("option4");

 questionLabel.setText("Q" + (currentQuestion + 1) + ": " + quiz[currentQuestion][0]);

 option1.setText(quiz[currentQuestion][1]);

 option1.setActionCommand(quiz[currentQuestion][1]);

 option2.setText(quiz[currentQuestion][2]);

 option2.setActionCommand(quiz[currentQuestion][2]);

 option3.setText(quiz[currentQuestion][3]);

 option3.setActionCommand(quiz[currentQuestion][3]);

 option4.setText(quiz[currentQuestion][4]);

 option4.setActionCommand(quiz[currentQuestion][4]);

 option1.setSelected(false);

 option2.setSelected(false);

 option3.setSelected(false);

 option4.setSelected(false);

 }

 private void initializeResultPanel() {

 resultPanel = new JPanel(new BorderLayout());

 JLabel resultLabel = new JLabel("", JLabel.CENTER);

 JButton closeButton = new JButton("Close");

 closeButton.addActionListener(e -> System.exit(0));

 resultPanel.add(resultLabel, BorderLayout.CENTER);

 resultPanel.add(closeButton, BorderLayout.SOUTH);
resultPanel.putClientProperty("resultLabel", resultLabel);

 }

 private void showResult() {

 JLabel resultLabel = (JLabel) resultPanel.getClientProperty("resultLabel");

 StringBuilder resultText = new StringBuilder("<html>Your Score: " + score + "/" + 

quiz.length + "<br><br>");

 for (int i = 0; i < quiz.length; i++) {

 resultText.append("Q").append(i + 1).append(": ").append(quiz[i][0]).append("<br>")

 .append("Correct Answer: ").append(quiz[i][5]).append("<br>")

 .append("Your Answer: ").append(studentAnswers[i] != null ? studentAnswers[i] : 

"No Answer").append("<br><br>");

 }

 resultText.append(score == quiz.length ? "Excellent!" : score >= quiz.length / 2 ? "Good 

Job!" : "Better luck next time.");

 resultText.append("</html>");

 resultLabel.setText(resultText.toString());

 }

}
